/*
 * interrupt_counter_tut_2B.c
 *
 *  Version 1.2 Author : Edward Todirica
 *
 *  Created on: 	Unknown
 *      Author: 	Ross Elliot
 *     Version:		1.1
 */

/********************************************************************************************

* VERSION HISTORY
********************************************************************************************
*   v1.2 - 10.11.2016
*		Fixed some bugs regarding Timer Interrupts and adding some
*       debug messages for the Timer Interrupt Handler
*
* 	v1.1 - 01/05/2015
* 		Updated for Zybo ~ DN
*
*	v1.0 - Unknown
*		First version created.
*******************************************************************************************/

#include <stdio.h>
#include "xparameters.h"
#include "xgpio.h"
#include "xtmrctr.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "xtime_l.h"
#include "test.h"

// Parameter definitions
#define INTC_DEVICE_ID 		XPAR_PS7_SCUGIC_0_DEVICE_ID
#define TMR_DEVICE_ID		XPAR_TMRCTR_0_DEVICE_ID
#define BTNS_DEVICE_ID		XPAR_AXI_GPIO_0_DEVICE_ID
#define LEDS_DEVICE_ID		XPAR_AXI_GPIO_1_DEVICE_ID
#define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR
#define INTC_TMR_INTERRUPT_ID XPAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR

#define BTN_INT 			XGPIO_IR_CH1_MASK
//#define TMR_LOAD			0xF8000000
#define TMR_LOAD			100000000

XGpio LEDInst, BTNInst;
XScuGic INTCInst;
//XTmrCtr TMRInst;
int led_data;
int btn_value;
int counter = 0;
//static int tmr_count;

XTime tStart, tEnd;

//----------------------------------------------------
// PROTOTYPE FUNCTIONS
//----------------------------------------------------
void BTN_Intr_Handler(void *baseaddr_p);
void TMR_Intr_Handler(void *InstancePtr, u8 TmrCtrNumber);
int InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
int IntcInitFunction(u16 DeviceId, XTmrCtr *TmrInstancePtr, XGpio *GpioInstancePtr);
void displayNumber(int sec1);

/*****************************************************************************/
/**
* This function should be part of the device driver for the timer device
* Clears the interrupt flag of the specified timer counter of the device.
* This is necessary to do in the interrupt routine after the interrupt was handled.
*
* @param	InstancePtr is a pointer to the XTmrCtr instance.
* @param	TmrCtrNumber is the timer counter of the device to operate on.
*		Each device may contain multiple timer counters. The timer
*		number is a zero based number  with a range of
*		0 - (XTC_DEVICE_TIMER_COUNT - 1).
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
void XTmrCtr_ClearInterruptFlag(XTmrCtr * InstancePtr, u8 TmrCtrNumber)
{
	u32 CounterControlReg;

	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(TmrCtrNumber < XTC_DEVICE_TIMER_COUNT);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/*
	 * Read current contents of the CSR register so it won't be destroyed
	 */
	CounterControlReg = XTmrCtr_ReadReg(InstancePtr->BaseAddress,
					       TmrCtrNumber, XTC_TCSR_OFFSET);
	/*
	 * Reset the interrupt flag
	 */
	XTmrCtr_WriteReg(InstancePtr->BaseAddress, TmrCtrNumber,
			  XTC_TCSR_OFFSET,
			  CounterControlReg | XTC_CSR_INT_OCCURED_MASK);
}



//----------------------------------------------------
// INTERRUPT HANDLER FUNCTIONS
// - called by the timer, button interrupt, performs
// - LED flashing
//----------------------------------------------------


void BTN_Intr_Handler(void *InstancePtr)
{
	xil_printf("hello\n");
	// Disable GPIO interrupts
	XGpio_InterruptDisable(&BTNInst, BTN_INT);
	// Ignore additional button presses
	if ((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) !=
			BTN_INT) {
			return;
		}
	btn_value = XGpio_DiscreteRead(&BTNInst, 1);
	// Increment counter based on button value
	// Reset if centre button pressed
	led_data = led_data + btn_value;

    XGpio_DiscreteWrite(&LEDInst, 1, led_data);
    (void)XGpio_InterruptClear(&BTNInst, BTN_INT);
    // Enable GPIO interrupts
    XGpio_InterruptEnable(&BTNInst, BTN_INT);
}

void TMR_Intr_Handler(void *InstancePtr, u8 TmrCtrNumber)
{
	double duration;
	static int tmr_count;
	XTime_GetTime(&tEnd);
	XTmrCtr* pTMRInst = (XTmrCtr *) InstancePtr;

	xil_printf("Timer %d interrupt \n", TmrCtrNumber);

	if (TmrCtrNumber==0) { //Handle interrupts generated by timer 0
		duration = ((double)(tEnd-tStart))/COUNTS_PER_SECOND;
		printf("Tmr_interrupt, tmr_count= %d, duration=%.6f s\n\r", tmr_count, (double)duration);

		tStart=tEnd;

		if (XTmrCtr_IsExpired(pTMRInst,0)){
			// Once timer has expired 3 times, stop, increment counter
			// reset timer and start running again
			if(tmr_count == 3){
				XTmrCtr_Stop(pTMRInst,0);
				tmr_count = 0;
				led_data++;
				test(++counter);
				XGpio_DiscreteWrite(&LEDInst, 1, led_data);
				XTmrCtr_Reset(pTMRInst,0);
				XTmrCtr_Start(pTMRInst,0);
				xil_printf("done\n");

			}
			else tmr_count++;
		}
	}
	else {  //Handle interrupts generated by timer 1

	}

	XTmrCtr_ClearInterruptFlag(pTMRInst, TmrCtrNumber);
}



//----------------------------------------------------
// MAIN FUNCTION
//----------------------------------------------------
int main (void)
{
  int status;
  XTmrCtr TMRInst;
  //----------------------------------------------------
  // INITIALIZE THE PERIPHERALS & SET DIRECTIONS OF GPIO
  //----------------------------------------------------
  // Initialise LEDs
  status = XGpio_Initialize(&LEDInst, LEDS_DEVICE_ID);
  if(status != XST_SUCCESS) return XST_FAILURE;
  // Initialise Push Buttons
  status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
  if(status != XST_SUCCESS) return XST_FAILURE;
  // Set LEDs direction to outputs
  XGpio_SetDataDirection(&LEDInst, 1, 0x00);
  // Set all buttons direction to inputs
  XGpio_SetDataDirection(&BTNInst, 1, 0xFF);


  //----------------------------------------------------
  // SETUP THE TIMER
  //----------------------------------------------------
  status = XTmrCtr_Initialize(&TMRInst, TMR_DEVICE_ID);
  if(status != XST_SUCCESS) return XST_FAILURE;
  XTmrCtr_SetHandler(&TMRInst, TMR_Intr_Handler, &TMRInst);
  XTmrCtr_SetResetValue(&TMRInst, 0, TMR_LOAD);
  XTmrCtr_SetOptions(&TMRInst, 0, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION | XTC_DOWN_COUNT_OPTION);

  // Initialize interrupt controller
  status = IntcInitFunction(INTC_DEVICE_ID, &TMRInst, &BTNInst);
  if(status != XST_SUCCESS) return XST_FAILURE;

  XTmrCtr_Start(&TMRInst, 0);
  //Here we get the time when the timer first started
  XTime_GetTime(&tStart);

  while(1);

  return 0;
}

//----------------------------------------------------
// INITIAL SETUP FUNCTIONS
//----------------------------------------------------

int InterruptSystemSetup(XScuGic *XScuGicInstancePtr)
{
	// Enable interrupt
	XGpio_InterruptEnable(&BTNInst, BTN_INT);
	XGpio_InterruptGlobalEnable(&BTNInst);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			 	 	 	 	 	 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
			 	 	 	 	 	 XScuGicInstancePtr);
	Xil_ExceptionEnable();


	return XST_SUCCESS;

}



int IntcInitFunction(u16 DeviceId, XTmrCtr *TmrInstancePtr, XGpio *GpioInstancePtr)
{
	XScuGic_Config *IntcConfig;
	int status;
	u8 pri, trig;

	// Interrupt controller initialisation
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Call to interrupt setup
	status = InterruptSystemSetup(&INTCInst);
	if(status != XST_SUCCESS) return XST_FAILURE;
	
	// Connect GPIO interrupt to handler
	status = XScuGic_Connect(&INTCInst,
					  	  	 INTC_GPIO_INTERRUPT_ID,
					  	  	 (Xil_ExceptionHandler)BTN_Intr_Handler,
					  	  	 (void *)GpioInstancePtr);
	if(status != XST_SUCCESS) return XST_FAILURE;


	// Connect timer interrupt to handler
	status = XScuGic_Connect(&INTCInst,
							 INTC_TMR_INTERRUPT_ID,
							// (Xil_ExceptionHandler)TMR_Intr_Handler,
							 (Xil_ExceptionHandler) XTmrCtr_InterruptHandler,
							 (void *)TmrInstancePtr);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Enable GPIO interrupts interrupt
	XGpio_InterruptEnable(GpioInstancePtr, 1);
	XGpio_InterruptGlobalEnable(GpioInstancePtr);

	// Enable GPIO and timer interrupts in the controller
	XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);
	XScuGic_Enable(&INTCInst, INTC_TMR_INTERRUPT_ID);

	xil_printf("Getting the Timer interrupt info\n\r");
	XScuGic_GetPriTrigTypeByDistAddr(INTCInst.Config->DistBaseAddress, INTC_TMR_INTERRUPT_ID, &pri, &trig);
	xil_printf("GPIO Interrupt-> Priority:%d, Trigger:%x\n\r", pri, trig);

	
	//Set the timer interrupt as edge triggered
	//XScuGic_SetPriorityTriggerType(&INTCInst, INTC_TMR_INTERRUPT_ID, )

	return XST_SUCCESS;
}

void displayNumber(int sec1) {

	char colon[9][4];

	strcpy(colon[0], "   ");
	strcpy(colon[1], "   ");
	strcpy(colon[2], "   ");
	strcpy(colon[3], " O ");
	strcpy(colon[4], "   ");
	strcpy(colon[5], " O ");
	strcpy(colon[6], "   ");
	strcpy(colon[7], "   ");
	strcpy(colon[8], "   ");

	char number0[9][10];

	strcpy(number0[0], "OOOOOOOOO");
	strcpy(number0[1], "O       O");
	strcpy(number0[2], "O       O");
	strcpy(number0[3], "O       O");
	strcpy(number0[4], "O       O");
	strcpy(number0[5], "O       O");
	strcpy(number0[6], "O       O");
	strcpy(number0[7], "O       O");
	strcpy(number0[8], "OOOOOOOOO");

	char number1[9][10];

	strcpy(number1[0], "        O");
	strcpy(number1[1], "        O");
	strcpy(number1[2], "        O");
	strcpy(number1[3], "        O");
	strcpy(number1[4], "        O");
	strcpy(number1[5], "        O");
	strcpy(number1[6], "        O");
	strcpy(number1[7], "        O");
	strcpy(number1[8], "        O");

	char number2[9][10];

	strcpy(number2[0], "OOOOOOOOO");
	strcpy(number2[1], "        O");
	strcpy(number2[2], "        O");
	strcpy(number2[3], "        O");
	strcpy(number2[4], "OOOOOOOOO");
	strcpy(number2[5], "O        ");
	strcpy(number2[6], "O        ");
	strcpy(number2[7], "O        ");
	strcpy(number2[8], "OOOOOOOOO");

	char number3[9][10];

	strcpy(number3[0], "OOOOOOOOO");
	strcpy(number3[1], "        O");
	strcpy(number3[2], "        O");
	strcpy(number3[3], "        O");
	strcpy(number3[4], "OOOOOOOOO");
	strcpy(number3[5], "        O");
	strcpy(number3[6], "        O");
	strcpy(number3[7], "        O");
	strcpy(number3[8], "OOOOOOOOO");

	char number4[9][10];

	strcpy(number4[0], "O       O");
	strcpy(number4[1], "O       O");
	strcpy(number4[2], "O       O");
	strcpy(number4[3], "O       O");
	strcpy(number4[4], "OOOOOOOOO");
	strcpy(number4[5], "        O");
	strcpy(number4[6], "        O");
	strcpy(number4[7], "        O");
	strcpy(number4[8], "        O");

	char number5[9][10];

	strcpy(number5[0], "OOOOOOOOO");
	strcpy(number5[1], "O        ");
	strcpy(number5[2], "O        ");
	strcpy(number5[3], "O        ");
	strcpy(number5[4], "OOOOOOOOO");
	strcpy(number5[5], "        O");
	strcpy(number5[6], "        O");
	strcpy(number5[7], "        O");
	strcpy(number5[8], "OOOOOOOOO");

	char number6[9][10];

	strcpy(number6[0], "OOOOOOOOO");
	strcpy(number6[1], "O        ");
	strcpy(number6[2], "O        ");
	strcpy(number6[3], "O        ");
	strcpy(number6[4], "OOOOOOOOO");
	strcpy(number6[5], "O       O");
	strcpy(number6[6], "O       O");
	strcpy(number6[7], "O       O");
	strcpy(number6[8], "OOOOOOOOO");

	char number7[9][10];

	strcpy(number7[0], "OOOOOOOOO");
	strcpy(number7[1], "        O");
	strcpy(number7[2], "        O");
	strcpy(number7[3], "        O");
	strcpy(number7[4], "        O");
	strcpy(number7[5], "        O");
	strcpy(number7[6], "        O");
	strcpy(number7[7], "        O");
	strcpy(number7[8], "        O");

	char number8[9][10];

	strcpy(number8[0], "OOOOOOOOO");
	strcpy(number8[1], "O       O");
	strcpy(number8[2], "O       O");
	strcpy(number8[3], "O       O");
	strcpy(number8[4], "OOOOOOOOO");
	strcpy(number8[5], "O       O");
	strcpy(number8[6], "O       O");
	strcpy(number8[7], "O       O");
	strcpy(number8[8], "OOOOOOOOO");

	char number9[9][10];

	strcpy(number9[0], "OOOOOOOOO");
	strcpy(number9[1], "O       O");
	strcpy(number9[2], "O       O");
	strcpy(number9[3], "O       O");
	strcpy(number9[4], "OOOOOOOOO");
	strcpy(number9[5], "        O");
	strcpy(number9[6], "        O");
	strcpy(number9[7], "        O");
	strcpy(number9[8], "OOOOOOOOO");

/*DEBUG
for (int i = 0; i < 9; i++) {

	xil_printf("%s %s %s %s %s %s %s %s %s \n", &number1[i], &number2[i], &number3[i], &number4[i], &number5[i], &number6[i], &number7[i], &number8[i], &number9[i]);

}
*/

	int hour10 = 2, hour1 = 3, min10 = 5, min1 = 9, sec10 = 4;

	//DEBUG
	//xil_printf("%d%d:%d%d:%d%d", hour10, hour1, min10, min1, sec10, sec1);


		if (sec1 > 9) {
			sec10++;
		}
		if (sec10 > 5) {
			min1++;
			sec10 = 0;
		}
		if (min1 > 9) {
			min10++;
			min1 = 0;
		}
		if (min10 > 5) {
			hour1++;
			min10 = 0;
		}
		if (hour1 > 9) {
			hour10++;
			hour1 = 0;
		}
		if (hour10 > 1 && hour1 > 3) {
			hour1 = 0;
			hour10 = 0;
		}

		/*DEBUG
		for(int i = 0; i < 9; i++)

		xil_printf("%d%d:%d%d:%d%d", hour10, hour1, min10, min1, sec10, sec1);
		*/

		for (int i = 0; i < 9; i++) {

			switch(hour10) {
			case 0:
				xil_printf("%s", number0[i]);
				break;
			case 1:
				xil_printf("%s", number1[i]);
				break;
			case 2:
				xil_printf("%s", number2[i]);
				break;
			}

			xil_printf(" ");

			switch (hour1) {
			case 0:
				xil_printf("%s", number0[i]);
				break;
			case 1:
				xil_printf("%s", number1[i]);
				break;
			case 2:
				xil_printf("%s", number2[i]);
				break;
			case 3:
				xil_printf("%s", number3[i]);
				break;
			case 4:
				xil_printf("%s", number4[i]);
				break;
			case 5:
				xil_printf("%s", number5[i]);
				break;
			case 6:
				xil_printf("%s", number6[i]);
				break;
			case 7:
				xil_printf("%s", number7[i]);
				break;
			case 8:
				xil_printf("%s", number8[i]);
				break;
			case 9:
				xil_printf("%s", number9[i]);
				break;
			}

			xil_printf(colon[i]);

			switch (min10) {
			case 0:
				xil_printf("%s", number0[i]);
				break;
			case 1:
				xil_printf("%s", number1[i]);
				break;
			case 2:
				xil_printf("%s", number2[i]);
				break;
			case 3:
				xil_printf("%s", number3[i]);
				break;
			case 4:
				xil_printf("%s", number4[i]);
				break;
			case 5:
				xil_printf("%s", number5[i]);
				break;
			case 6:
				xil_printf("%s", number6[i]);
				break;
			}

			xil_printf(" ");

			switch (min1) {
			case 0:
				xil_printf("%s", number0[i]);
				break;
			case 1:
				xil_printf("%s", number1[i]);
				break;
			case 2:
				xil_printf("%s", number2[i]);
				break;
			case 3:
				xil_printf("%s", number3[i]);
				break;
			case 4:
				xil_printf("%s", number4[i]);
				break;
			case 5:
				xil_printf("%s", number5[i]);
				break;
			case 6:
				xil_printf("%s", number6[i]);
				break;
			case 7:
				xil_printf("%s", number7[i]);
				break;
			case 8:
				xil_printf("%s", number8[i]);
				break;
			case 9:
				xil_printf("%s", number9[i]);
				break;
			}

			xil_printf(colon[i]);

			switch (sec10) {
			case 0:
				xil_printf("%s", number0[i]);
				break;
			case 1:
				xil_printf("%s", number1[i]);
				break;
			case 2:
				xil_printf("%s", number2[i]);
				break;
			case 3:
				xil_printf("%s", number3[i]);
				break;
			case 4:
				xil_printf("%s", number4[i]);
				break;
			case 5:
				xil_printf("%s", number5[i]);
				break;
			case 6:
				xil_printf("%s", number6[i]);
				break;
			}

			xil_printf(" ");

			switch (sec1) {
			case 0:
				xil_printf("%s", number0[i]);
				break;
			case 1:
				xil_printf("%s", number1[i]);
				break;
			case 2:
				xil_printf("%s", number2[i]);
				break;
			case 3:
				xil_printf("%s", number3[i]);
				break;
			case 4:
				xil_printf("%s", number4[i]);
				break;
			case 5:
				xil_printf("%s", number5[i]);
				break;
			case 6:
				xil_printf("%s", number6[i]);
				break;
			case 7:
				xil_printf("%s", number7[i]);
				break;
			case 8:
				xil_printf("%s", number8[i]);
				break;
			case 9:
				xil_printf("%s", number9[i]);
				break;
			}
			xil_printf("\n");
			xil_printf("inside\n");
		}
		xil_printf("hello\n");
}
