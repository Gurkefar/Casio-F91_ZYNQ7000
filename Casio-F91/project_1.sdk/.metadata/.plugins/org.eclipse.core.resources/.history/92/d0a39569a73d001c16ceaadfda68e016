#include <stdlib.h>
#include "ascii_display.h"
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include "xil_printf.h"

void displayNumber(int sec1) {
	xil_printf("hello");
	char colon[9][4];

	strcpy(colon[0], "   ");
	strcpy(colon[1], "   ");
	strcpy(colon[2], "   ");
	strcpy(colon[3], " O ");
	strcpy(colon[4], "   ");
	strcpy(colon[5], " O ");
	strcpy(colon[6], "   ");
	strcpy(colon[7], "   ");
	strcpy(colon[8], "   ");

	char number0[9][10];

	strcpy(number0[0], "OOOOOOOOO");
	strcpy(number0[1], "O       O");
	strcpy(number0[2], "O       O");
	strcpy(number0[3], "O       O");
	strcpy(number0[4], "O       O");
	strcpy(number0[5], "O       O");
	strcpy(number0[6], "O       O");
	strcpy(number0[7], "O       O");
	strcpy(number0[8], "OOOOOOOOO");

	char number1[9][10];

	strcpy(number1[0], "        O");
	strcpy(number1[1], "        O");
	strcpy(number1[2], "        O");
	strcpy(number1[3], "        O");
	strcpy(number1[4], "        O");
	strcpy(number1[5], "        O");
	strcpy(number1[6], "        O");
	strcpy(number1[7], "        O");
	strcpy(number1[8], "        O");

	char number2[9][10];

	strcpy(number2[0], "OOOOOOOOO");
	strcpy(number2[1], "        O");
	strcpy(number2[2], "        O");
	strcpy(number2[3], "        O");
	strcpy(number2[4], "OOOOOOOOO");
	strcpy(number2[5], "O        ");
	strcpy(number2[6], "O        ");
	strcpy(number2[7], "O        ");
	strcpy(number2[8], "OOOOOOOOO");

	char number3[9][10];

	strcpy(number3[0], "OOOOOOOOO");
	strcpy(number3[1], "        O");
	strcpy(number3[2], "        O");
	strcpy(number3[3], "        O");
	strcpy(number3[4], "OOOOOOOOO");
	strcpy(number3[5], "        O");
	strcpy(number3[6], "        O");
	strcpy(number3[7], "        O");
	strcpy(number3[8], "OOOOOOOOO");

	char number4[9][10];

	strcpy(number4[0], "O       O");
	strcpy(number4[1], "O       O");
	strcpy(number4[2], "O       O");
	strcpy(number4[3], "O       O");
	strcpy(number4[4], "OOOOOOOOO");
	strcpy(number4[5], "        O");
	strcpy(number4[6], "        O");
	strcpy(number4[7], "        O");
	strcpy(number4[8], "        O");

	char number5[9][10];

	strcpy(number5[0], "OOOOOOOOO");
	strcpy(number5[1], "O        ");
	strcpy(number5[2], "O        ");
	strcpy(number5[3], "O        ");
	strcpy(number5[4], "OOOOOOOOO");
	strcpy(number5[5], "        O");
	strcpy(number5[6], "        O");
	strcpy(number5[7], "        O");
	strcpy(number5[8], "OOOOOOOOO");

	char number6[9][10];

	strcpy(number6[0], "OOOOOOOOO");
	strcpy(number6[1], "O        ");
	strcpy(number6[2], "O        ");
	strcpy(number6[3], "O        ");
	strcpy(number6[4], "OOOOOOOOO");
	strcpy(number6[5], "O       O");
	strcpy(number6[6], "O       O");
	strcpy(number6[7], "O       O");
	strcpy(number6[8], "OOOOOOOOO");

	char number7[9][10];

	strcpy(number7[0], "OOOOOOOOO");
	strcpy(number7[1], "        O");
	strcpy(number7[2], "        O");
	strcpy(number7[3], "        O");
	strcpy(number7[4], "        O");
	strcpy(number7[5], "        O");
	strcpy(number7[6], "        O");
	strcpy(number7[7], "        O");
	strcpy(number7[8], "        O");

	char number8[9][10];

	strcpy(number8[0], "OOOOOOOOO");
	strcpy(number8[1], "O       O");
	strcpy(number8[2], "O       O");
	strcpy(number8[3], "O       O");
	strcpy(number8[4], "OOOOOOOOO");
	strcpy(number8[5], "O       O");
	strcpy(number8[6], "O       O");
	strcpy(number8[7], "O       O");
	strcpy(number8[8], "OOOOOOOOO");

	char number9[9][10];

	strcpy(number9[0], "OOOOOOOOO");
	strcpy(number9[1], "O       O");
	strcpy(number9[2], "O       O");
	strcpy(number9[3], "O       O");
	strcpy(number9[4], "OOOOOOOOO");
	strcpy(number9[5], "        O");
	strcpy(number9[6], "        O");
	strcpy(number9[7], "        O");
	strcpy(number9[8], "OOOOOOOOO");

/*DEBUG
for (int i = 0; i < 9; i++) {

	xil_printf("%s %s %s %s %s %s %s %s %s \n", &number1[i], &number2[i], &number3[i], &number4[i], &number5[i], &number6[i], &number7[i], &number8[i], &number9[i]);

}
*/

	int hour10 = 2, hour1 = 3, min10 = 5, min1 = 9, sec10 = 4;

	//DEBUG
	//xil_printf("%d%d:%d%d:%d%d", hour10, hour1, min10, min1, sec10, sec1);



		sec1++;

		if (sec1 > 9) {
			sec10++;
			sec1 = 0;
		}
		if (sec10 > 5) {
			min1++;
			sec10 = 0;
		}
		if (min1 > 9) {
			min10++;
			min1 = 0;
		}
		if (min10 > 5) {
			hour1++;
			min10 = 0;
		}
		if (hour1 > 9) {
			hour10++;
			hour1 = 0;
		}
		if (hour10 > 1 && hour1 > 3) {
			hour1 = 0;
			hour10 = 0;
		}

		/*DEBUG
		for(int i = 0; i < 9; i++)

		xil_printf("%d%d:%d%d:%d%d", hour10, hour1, min10, min1, sec10, sec1);
		*/

		for (int i = 0; i < 9; i++) {

			switch(hour10) {
			case 0:
				xil_printf("%s", number0[i]);
				return;
			case 1:
				xil_printf("%s", number1[i]);
				return;
			case 2:
				xil_printf("%s", number2[i]);
				return;
			}

			xil_printf(" ");

			switch (hour1) {
			case 0:
				xil_printf("%s", number0[i]);
				return;
			case 1:
				xil_printf("%s", number1[i]);
				return;
			case 2:
				xil_printf("%s", number2[i]);
				return;
			case 3:
				xil_printf("%s", number3[i]);
				return;
			case 4:
				xil_printf("%s", number4[i]);
				return;
			case 5:
				xil_printf("%s", number5[i]);
				return;
			case 6:
				xil_printf("%s", number6[i]);
				return;
			case 7:
				xil_printf("%s", number7[i]);
				return;
			case 8:
				xil_printf("%s", number8[i]);
				return;
			case 9:
				xil_printf("%s", number9[i]);
				return;
			}

			xil_printf(colon[i]);

			switch (min10) {
			case 0:
				xil_printf("%s", number0[i]);
				return;
			case 1:
				xil_printf("%s", number1[i]);
				return;
			case 2:
				xil_printf("%s", number2[i]);
				return;
			case 3:
				xil_printf("%s", number3[i]);
				return;
			case 4:
				xil_printf("%s", number4[i]);
				return;
			case 5:
				xil_printf("%s", number5[i]);
				return;
			case 6:
				xil_printf("%s", number6[i]);
				return;
			}

			xil_printf(" ");

			switch (min1) {
			case 0:
				xil_printf("%s", number0[i]);
				return;
			case 1:
				xil_printf("%s", number1[i]);
				return;
			case 2:
				xil_printf("%s", number2[i]);
				return;
			case 3:
				xil_printf("%s", number3[i]);
				return;
			case 4:
				xil_printf("%s", number4[i]);
				return;
			case 5:
				xil_printf("%s", number5[i]);
				return;
			case 6:
				xil_printf("%s", number6[i]);
				return;
			case 7:
				xil_printf("%s", number7[i]);
				return;
			case 8:
				xil_printf("%s", number8[i]);
				return;
			case 9:
				xil_printf("%s", number9[i]);
				return;
			}

			xil_printf(colon[i]);

			switch (sec10) {
			case 0:
				xil_printf("%s", number0[i]);
				return;
			case 1:
				xil_printf("%s", number1[i]);
				return;
			case 2:
				xil_printf("%s", number2[i]);
				return;
			case 3:
				xil_printf("%s", number3[i]);
				return;
			case 4:
				xil_printf("%s", number4[i]);
				return;
			case 5:
				xil_printf("%s", number5[i]);
				return;
			case 6:
				xil_printf("%s", number6[i]);
				return;
			}

			xil_printf(" ");

			switch (sec1) {
			case 0:
				xil_printf("%s", number0[i]);
				return;
			case 1:
				xil_printf("%s", number1[i]);
				return;
			case 2:
				xil_printf("%s", number2[i]);
				return;
			case 3:
				xil_printf("%s", number3[i]);
				return;
			case 4:
				xil_printf("%s", number4[i]);
				return;
			case 5:
				xil_printf("%s", number5[i]);
				return;
			case 6:
				xil_printf("%s", number6[i]);
				return;
			case 7:
				xil_printf("%s", number7[i]);
				return;
			case 8:
				xil_printf("%s", number8[i]);
				return;
			case 9:
				xil_printf("%s", number9[i]);
				return;
			}

			xil_printf("\n");

		}
	}
